{"version":3,"sources":["components/Timeline.jsx","App.js","serviceWorker.js","index.js"],"names":["Timeline","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","filterTransactions","obj","newObj","filter","el","event","sort","a","b","Date","timestamp","transactions","values","forEach","transaction","custom_data","find","o","key","value","revenue","date","store","push","filterProducts","products","product","name","price","state","items","_this2","fetch","proxyUrl","then","res","json","setState","events","_this3","react_default","createElement","className","map","item","i","src","alt","Intl","DateTimeFormat","format","hour","minute","NumberFormat","style","currency","Component","App","Timeline_Timeline","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3372f7c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Timeline.scss';\n\nexport default class Timeline extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n    }\n  }\n\n  componentDidMount() {\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = 'https://storage.googleapis.com/dito-questions/events.json'\n    fetch(proxyUrl + targetUrl)\n      .then(res => res.json())\n      .then(json => {\n        this.setState({\n          items: json.events,\n        })\n      });\n  }\n\n  /**\n   * Filtra transações no Objeto\n   * \n   * @memberof Timeline\n   * @param {obj} obj - Objeto contendo transações identificadas pelo event \"comprou\".\n   */\n  filterTransactions = (obj) => {\n    let newObj = obj.filter(function (el) {\n      return el.event === \"comprou\"\n    }).sort(function (a, b) {\n      return new Date(a.timestamp) - new Date(b.timestamp);\n    });\n\n    let transactions = [];\n    Object.values(newObj).forEach(el => {\n      let transaction = { transaction: el.custom_data.find(o => o.key === \"transaction_id\").value, revenue: el.revenue, date: el.timestamp, store: el.custom_data.find(o => o.key === \"store_name\").value };\n      transactions.push(transaction);\n    });\n\n    return transactions;\n\n  }\n\n  /**\n   * Filtra transações no Objeto para a transação solicitada\n   * \n   * @memberof Timeline\n   * @param {obj} obj - Objeto contendo produtos identificadas pelo event \"comprou-produto\".\n   * @param {string} transaction - Transação para que sejam listados os produtos correspondentes\".\n   */\n  filterProducts = (obj, transaction) => {\n    let newObj = obj.filter(function (el) {\n      return el.event === \"comprou-produto\" && el.custom_data.find(o => o.value === transaction)\n    });\n\n    let products = [];\n    Object.values(newObj).forEach(el => {\n      let product = { name: el.custom_data.find(o => o.key === \"product_name\").value, price: el.custom_data.find(o => o.key === \"product_price\").value };\n      products.push(product);\n    });\n\n    return products;\n  }\n\n  render() {\n    var { items } = this.state;\n    return (\n      <ul className=\"timeline\">\n        {\n          this.filterTransactions(items).map((item, i) => {\n            return (\n              <li className=\"timeline-left\" key={i}>\n                <div className=\"timeline-badge\">\n                  <img src=\"assets/check.svg\" alt=\"check\" />\n                </div>\n                <div className=\"timeline-panel\">\n                  <div className=\"timeline-heading\">\n                    <div><img src=\"assets/calendar.svg\" alt=\"calendar\" /> {new Intl.DateTimeFormat('pt-br').format(new Date(item.date))}</div>\n                    <div><img src=\"assets/clock.svg\" alt=\"clock\" /> {new Intl.DateTimeFormat('pt-br', { hour: 'numeric', minute: 'numeric' }).format(new Date(item.date))}</div>\n                    <div><img src=\"assets/place.svg\" alt=\"place\" /> {item.store}</div>\n                    <div><img src=\"assets/money.svg\" alt=\"money\" /> {new Intl.NumberFormat('pt-br', { style: 'currency', currency: 'BRL' }).format(item.revenue)}</div>\n                  </div>\n                  <div className=\"timeline-body\">\n                    <table className=\"table-item\">\n                      <thead>\n                        <tr>\n                          <th className=\"product-description\">Produto</th>\n                          <th>Preço</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {\n                          this.filterProducts(items, item.transaction).map((item, i) => {\n                            return (\n                              <tr key={i}>\n                                <td>{item.name}</td>\n                                <td>{new Intl.NumberFormat('pt-br', { style: 'currency', currency: 'BRL' }).format(item.price)}</td>\n                              </tr>\n                            );\n                          })\n                        }\n                      </tbody>\n                    </table>\n\n                  </div>\n                </div>\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  }\n}","import React, { Component } from 'react';\nimport Timeline from './components/Timeline';\nimport './App.scss';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <Timeline></Timeline>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}